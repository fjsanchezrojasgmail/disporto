declare function findPrimes(n: any): any[];
declare function millerRabinInt(x: any, b: any): 0 | 1;
declare function millerRabin(x: any, b: any): 0 | 1;
declare function bitSize(x: any): number;
declare function expand(x: any, n: any): any;
declare function randTruePrime(k: any): any[];
declare function randProbPrime(k: any): any;
declare function randProbPrimeRounds(k: any, n: any): any;
declare function mod(x: any, n: any): any[];
declare function addInt(x: any, n: any): any[];
declare function mult(x: any, y: any): any[];
declare function powMod(x: any, y: any, n: any): any[];
declare function sub(x: any, y: any): any[];
declare function add(x: any, y: any): any[];
declare function inverseMod(x: any, n: any): any[] | null;
declare function multMod(x: any, y: any, n: any): any[];
declare function randTruePrime_(ans: any, k: any): void;
declare function randBigInt(n: any, s: any): any;
declare function randBigInt_(b: any, n: any, s: any): void;
declare function GCD(x: any, y: any): any;
declare function GCD_(x: any, y: any): void;
declare function inverseMod_(x: any, n: any): 0 | 1;
declare function inverseModInt(x: any, n: any): number;
declare function inverseModInt_(x: any, n: any): number;
declare function eGCD_(x: any, y: any, v: any, a: any, b: any): void;
declare function negative(x: any): number;
declare function greaterShift(x: any, y: any, shift: any): 0 | 1;
declare function greater(x: any, y: any): 0 | 1;
declare function divide_(x: any, y: any, q: any, r: any): void;
declare function carry_(x: any): void;
declare function modInt(x: any, n: any): number;
declare function int2bigInt(t: any, bits: any, minSize: any): any;
declare function str2bigInt(s: any, base: any, minSize: any): any[];
declare function equalsInt(x: any, y: any): 0 | 1;
declare function equals(x: any, y: any): 0 | 1;
declare function isZero(x: any): 0 | 1;
declare function bigInt2str(x: any, base: any): string;
declare function dup(x: any): any;
declare function copy_(x: any, y: any): void;
declare function copyInt_(x: any, n: any): void;
declare function addInt_(x: any, n: any): void;
declare function rightShift_(x: any, n: any): void;
declare function halve_(x: any): void;
declare function leftShift_(x: any, n: any): void;
declare function multInt_(x: any, n: any): void;
declare function divInt_(x: any, n: any): number;
declare function linComb_(x: any, y: any, a: any, b: any): void;
declare function linCombShift_(x: any, y: any, b: any, ys: any): void;
declare function addShift_(x: any, y: any, ys: any): void;
declare function subShift_(x: any, y: any, ys: any): void;
declare function sub_(x: any, y: any): void;
declare function add_(x: any, y: any): void;
declare function mult_(x: any, y: any): void;
declare function mod_(x: any, n: any): void;
declare function multMod_(x: any, y: any, n: any): void;
declare function squareMod_(x: any, n: any): void;
declare function trim(x: any, k: any): any[];
declare function powMod_(x: any, y: any, n: any): void;
declare function mont_(x: any, y: any, n: any, np: any): void;
